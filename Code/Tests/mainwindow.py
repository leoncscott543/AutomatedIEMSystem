# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
import pyaudio
import struct
import matplotlib.pyplot as plt
import wave
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
import struct

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #Creating a horizontal layout
        self.horizontalLayoutMainPlot = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayoutMainPlot.setObjectName("horizontalLayoutMainPlot")
        #End horizontal Layout

        #Canvas Start
        self.figure = plt.figure()
        self.canvas = FigureCanvasQTAgg(self.figure)
        #Canvas End

        #Add Canvas
        self.horizontalLayoutMainPlot.addWidget(self.canvas)
        #End Add Canvas

        #self.verticalLayout.add

        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda : self.spectrumAnalyzer())
        self.pushButton.setGeometry(QtCore.QRect(0, 0, 131, 32))
        self.pushButton.setObjectName("pushButton")
        self.main_plot = QtWidgets.QWidget(self.centralwidget)
        self.main_plot.setGeometry(QtCore.QRect(0, 30, 661, 241))
        self.main_plot.setObjectName("main_plot")


        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 0, 131, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(260, 0, 100, 32))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(360, 0, 111, 32))
        self.pushButton_4.setObjectName("pushButton_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSave_wav_file_as = QtWidgets.QMenu(self.menuFile)
        self.menuSave_wav_file_as.setObjectName("menuSave_wav_file_as")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuAudio_Mixing = QtWidgets.QMenu(self.menuEdit)
        self.menuAudio_Mixing.setObjectName("menuAudio_Mixing")
        self.menuRecord = QtWidgets.QMenu(self.menubar)
        self.menuRecord.setObjectName("menuRecord")
        self.menuAudio = QtWidgets.QMenu(self.menubar)
        self.menuAudio.setObjectName("menuAudio")
        self.menuPlay = QtWidgets.QMenu(self.menuAudio)
        self.menuPlay.setObjectName("menuPlay")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_wav_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_wav_file.setObjectName("actionOpen_wav_file")
        self.actionSave_wav_file = QtWidgets.QAction(MainWindow)
        self.actionSave_wav_file.setObjectName("actionSave_wav_file")
        self.actionNew_file = QtWidgets.QAction(MainWindow)
        self.actionNew_file.setObjectName("actionNew_file")
        self.actionBegin_Recording = QtWidgets.QAction(MainWindow)
        self.actionBegin_Recording.setObjectName("actionBegin_Recording")
        self.actionEnd_Recording = QtWidgets.QAction(MainWindow)
        self.actionEnd_Recording.setObjectName("actionEnd_Recording")
        self.actionSave_as_flac = QtWidgets.QAction(MainWindow)
        self.actionSave_as_flac.setObjectName("actionSave_as_flac")
        self.actionSave_as_mp3 = QtWidgets.QAction(MainWindow)
        self.actionSave_as_mp3.setObjectName("actionSave_as_mp3")
        self.actionReset_Recording = QtWidgets.QAction(MainWindow)
        self.actionReset_Recording.setObjectName("actionReset_Recording")
        self.actionRaw_Audio = QtWidgets.QAction(MainWindow)
        self.actionRaw_Audio.setObjectName("actionRaw_Audio")
        self.actionFiltered_Audio = QtWidgets.QAction(MainWindow)
        self.actionFiltered_Audio.setObjectName("actionFiltered_Audio")
        self.actionEdited_Audio = QtWidgets.QAction(MainWindow)
        self.actionEdited_Audio.setObjectName("actionEdited_Audio")
        self.actionOpen_Editor = QtWidgets.QAction(MainWindow)
        self.actionOpen_Editor.setObjectName("actionOpen_Editor")
        self.actionj = QtWidgets.QAction(MainWindow)
        self.actionj.setObjectName("actionj")
        self.actionAudio_History = QtWidgets.QAction(MainWindow)
        self.actionAudio_History.setObjectName("actionAudio_History")
        self.menuSave_wav_file_as.addAction(self.actionSave_as_flac)
        self.menuSave_wav_file_as.addAction(self.actionSave_as_mp3)
        self.menuFile.addAction(self.actionNew_file)
        self.menuFile.addAction(self.actionOpen_wav_file)
        self.menuFile.addAction(self.actionSave_wav_file)
        self.menuFile.addAction(self.menuSave_wav_file_as.menuAction())
        self.menuAudio_Mixing.addAction(self.actionOpen_Editor)
        self.menuEdit.addAction(self.menuAudio_Mixing.menuAction())
        self.menuEdit.addAction(self.actionj)
        self.menuRecord.addAction(self.actionBegin_Recording)
        self.menuRecord.addAction(self.actionEnd_Recording)
        self.menuRecord.addAction(self.actionReset_Recording)
        self.menuPlay.addAction(self.actionRaw_Audio)
        self.menuPlay.addAction(self.actionFiltered_Audio)
        self.menuPlay.addAction(self.actionEdited_Audio)
        self.menuPlay.addAction(self.actionAudio_History)
        self.menuAudio.addAction(self.menuPlay.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuRecord.menuAction())
        self.menubar.addAction(self.menuAudio.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Start Recording"))
        self.pushButton_2.setText(_translate("MainWindow", "Upload .wav file"))
        self.pushButton_3.setText(_translate("MainWindow", "Edit Wave"))
        self.pushButton_4.setText(_translate("MainWindow", "Automate Edit"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        #self.menuFile.clicked.connect(self.openFile)
        self.menuSave_wav_file_as.setTitle(_translate("MainWindow", "Save .wav file as "))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuAudio_Mixing.setTitle(_translate("MainWindow", "Audio Mixing"))
        self.menuRecord.setTitle(_translate("MainWindow", "Record"))
        self.menuAudio.setTitle(_translate("MainWindow", "Audio"))
        self.menuPlay.setTitle(_translate("MainWindow", "Play"))
        self.actionOpen_wav_file.setText(_translate("MainWindow", "Open .wav file"))
        self.actionOpen_wav_file.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave_wav_file.setText(_translate("MainWindow", "Save .wav file"))
        self.actionSave_wav_file.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionNew_file.setText(_translate("MainWindow", "New file"))
        self.actionNew_file.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionBegin_Recording.setText(_translate("MainWindow", "Begin Recording"))
        self.actionEnd_Recording.setText(_translate("MainWindow", "End Recording"))
        self.actionSave_as_flac.setText(_translate("MainWindow", "Save as .flac"))
        self.actionSave_as_mp3.setText(_translate("MainWindow", "Save as .mp3"))
        self.actionReset_Recording.setText(_translate("MainWindow", "Reset Recording"))
        self.actionRaw_Audio.setText(_translate("MainWindow", "Raw Audio"))
        self.actionFiltered_Audio.setText(_translate("MainWindow", "Filtered Audio"))
        self.actionEdited_Audio.setText(_translate("MainWindow", "Edited Audio"))
        self.actionOpen_Editor.setText(_translate("MainWindow", "Open Editor"))
        self.actionj.setText(_translate("MainWindow", "Automate Sound Editing"))
        self.actionAudio_History.setText(_translate("MainWindow", "Audio History"))

    def spectrumAnalyzer(self):

        #self.figure.clear()

        CHUNK = 1024 * 2
        FORMAT = pyaudio.paInt16
        CHANNELS = 1
        RATE = 44100

        p = pyaudio.PyAudio()

        stream = p.open(
            format=FORMAT,
            channels=CHANNELS,
            rate=RATE,
            input=True,
            output=True,
            frames_per_buffer=CHUNK)

        # mic_rec_data = stream.read(CHUNK)
        # mic_rec_int = struct.unpack(str(CHUNK) + 'h', mic_rec_data)
        # print(mic_rec_int)

        fig, ax = plt.subplots()
        x = np.arange(0, 2 * CHUNK, 2)
        line, = ax.plot(x, np.random.rand(CHUNK), 'r')
        ax.set_ylim(-60000, 60000)
        ax.set_xlim(0, CHUNK)
        fig.show()

        try:
            while True:
                stream.start_stream()
                mic_rec_data = stream.read(CHUNK, exception_on_overflow=False)
                mic_rec_int = struct.unpack(str(CHUNK) + 'h', mic_rec_data)
                line.set_ydata(mic_rec_int)
                fig.canvas.draw()
                fig.canvas.flush_events()
        except KeyboardInterrupt:
            pass

    def openFile(self):
        pass




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
